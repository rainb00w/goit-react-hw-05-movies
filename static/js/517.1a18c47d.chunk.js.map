{"version":3,"file":"static/js/517.1a18c47d.chunk.js","mappings":"sRAEMA,EAAU,4CAEVC,E,MAAeC,GAAAA,OAAa,CAChCC,QAAS,kCAGJ,SAASC,IACd,OAAOH,EAAa,qBAAD,OAAsBD,EAAtB,YAAwCK,MAAK,SAAAC,GAC9D,KAAMA,EAAIC,QAAU,KAAOD,EAAIC,OAAS,KACtC,MAAMC,MAAMF,EAAIG,YAElB,OAAOH,KAIJ,SAASI,EAAiBC,GAC/B,OAAOV,EAAa,eAAD,OAAgBD,EAAhB,kBAAiCW,EAAjC,YAAqDN,MACtE,SAAAC,GACE,KAAMA,EAAIC,QAAU,KAAOD,EAAIC,OAAS,KACtC,MAAMC,MAAMF,EAAIG,YAElB,OAAOH,KAKN,SAASM,EAAeC,GAC7B,OAAOZ,EAAa,SAAD,OAAUY,GAAV,OAAeb,EAAf,oBAAyCK,MAAK,SAAAC,GAC/D,KAAMA,EAAIC,QAAU,KAAOD,EAAIC,OAAS,KACtC,MAAMC,MAAMF,EAAIG,YAElB,OAAOH,KAIJ,SAASQ,EAAeD,GAC7B,OAAOZ,EAAa,UAAD,OAAWY,EAAX,mBAAwBb,IAAWK,MAAK,SAAAC,GACzD,KAAMA,EAAIC,QAAU,KAAOD,EAAIC,OAAS,KACtC,MAAMC,MAAMF,EAAIG,YAElB,OAAOH,KAIJ,SAASS,EAAkBF,GAChC,OAAOZ,EAAa,UAAD,OACPY,EADO,mBACMb,EADN,2BAEjBK,MAAK,SAAAC,GACL,KAAMA,EAAIC,QAAU,KAAOD,EAAIC,OAAS,KACtC,MAAMC,MAAMF,EAAIG,YAElB,OAAOH,O,iGC2BX,UA3EkB,WAAO,IAAD,IACtB,GAAwBU,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAWC,EAAAA,EAAAA,MAAXD,OACFE,GAAWC,EAAAA,EAAAA,MAEjBC,QAAQC,IAAIT,IACZU,EAAAA,EAAAA,YAAU,WACHV,GACHW,EAAAA,GAAwBP,GACrBhB,MAAK,SAAAwB,GAAS,OAAIX,EAAQW,EAAUC,SACpCC,OAAM,SAAAZ,GACLM,QAAQC,IAAIP,GACZC,EAASD,QAGd,CAACE,EAAQJ,IAEZ,IAAMe,EAAI,iBAAGT,QAAH,IAAGA,GAAH,UAAGA,EAAUU,aAAb,aAAG,EAAiBC,YAApB,QAA4B,IAEtC,OACE,iBAAKC,UAAWC,EAAAA,EAAAA,SAAhB,WACE,0BACE,SAAC,KAAD,CAAMC,GAAIL,EAAMG,UAAWC,EAAAA,EAAAA,SAA3B,SACG,kBAGL,iBAAKD,UAAWC,EAAAA,EAAAA,UAAhB,UACGjB,IAAS,uDACTF,IACC,iCACE,gBACEqB,IAAI,eACJC,IAAG,0CAAqCtB,EAAKuB,aAC7CC,MAAM,WAER,iBAAKN,UAAWC,EAAAA,EAAAA,cAAhB,WACE,0BACGnB,EAAKyB,MADR,KACiBzB,EAAK0B,aAAaC,UAAU,EAAG,GADhD,QAGA,wCAAoC,GAApB3B,EAAK4B,aAArB,SACA,sCACA,uBAAI5B,EAAK6B,YACT,mCACC7B,EAAK8B,OAAOC,KAAI,SAAAC,GACf,MAAM,GAAN,OAAUA,EAAKC,KAAf,mBAOV,iBAAKf,UAAWC,EAAAA,EAAAA,eAAhB,WACE,mDACA,yBACE,SAAC,KAAD,CAAMC,GAAG,OAAOJ,MAAO,CAAEC,KAAMF,GAAQG,UAAWC,EAAAA,EAAAA,WAAlD,qBAIF,yBACE,SAAC,KAAD,CACEC,GAAG,UACHJ,MAAO,CAAEC,KAAMF,GACfG,UAAWC,EAAAA,EAAAA,WAHb,2BAUJ,SAAC,KAAD","sources":["services/FetchApi.js","views/MovieDetails.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '?api_key=ad8c6c4dd7f8a685c9c739255442ccd5';\n\nconst axiosRequest = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n});\n\nexport function FetchTrends() {\n  return axiosRequest(`trending/movie/day${API_KEY}&page=1`).then(res => {\n    if (!(res.status >= 200 && res.status < 300)) {\n      throw Error(res.statusText);\n    }\n    return res;\n  });\n}\n\nexport function FetchMovieByName(movieName) {\n  return axiosRequest(`search/movie${API_KEY}&query=${movieName}&page=1`).then(\n    res => {\n      if (!(res.status >= 200 && res.status < 300)) {\n        throw Error(res.statusText);\n      }\n      return res;\n    }\n  );\n}\n\nexport function FetchMovieById(ID) {\n  return axiosRequest(`movie/${ID}${API_KEY}&language=en-US`).then(res => {\n    if (!(res.status >= 200 && res.status < 300)) {\n      throw Error(res.statusText);\n    }\n    return res;\n  });\n}\n\nexport function FetchMovieCast(ID) {\n  return axiosRequest(`/movie/${ID}/credits${API_KEY}`).then(res => {\n    if (!(res.status >= 200 && res.status < 300)) {\n      throw Error(res.statusText);\n    }\n    return res;\n  });\n}\n\nexport function FetchMovieReviews(ID) {\n  return axiosRequest(\n    `/movie/${ID}/reviews${API_KEY}&language=en-US&page=1`\n  ).then(res => {\n    if (!(res.status >= 200 && res.status < 300)) {\n      throw Error(res.statusText);\n    }\n    return res;\n  });\n}\n","import React, { useState, useEffect } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport * as FetchApi from '../services/FetchApi';\nimport styles from './views.module.css';\n\nconst MoviePage = () => {\n  const [film, setFilm] = useState(null);\n  const [error, setError] = useState(null);\n  const { itemId } = useParams();\n  const location = useLocation();\n\n  console.log(film);\n  useEffect(() => {\n    if (!film) {\n      FetchApi.FetchMovieById(itemId)\n        .then(movieInfo => setFilm(movieInfo.data))\n        .catch(error => {\n          console.log(error);\n          setError(error);\n        });\n    }\n  }, [itemId, film]);\n\n  const path = location?.state?.from ?? '/';\n\n  return (\n    <div className={styles.homeList}>\n      <div>\n        <Link to={path} className={styles.btnStyle}>\n          {'<- Go Back'}\n        </Link>\n      </div>\n      <div className={styles.movieInfo}>\n        {error && <div>There are no such movie !</div>}\n        {film && (\n          <>\n            <img\n              alt=\"Movie Poster\"\n              src={`https://image.tmdb.org/t/p/w500/${film.poster_path}`}\n              width=\"200px\"\n            ></img>\n            <div className={styles.movieTextInfo}>\n              <h3>\n                {film.title} ({film.release_date.substring(0, 4)})\n              </h3>\n              <p>User score: {film.vote_average * 10} %</p>\n              <h4>Overview</h4>\n              <p>{film.overview}</p>\n              <h4>Genres</h4>\n              {film.genres.map(item => {\n                return `${item.name}  `;\n              })}\n            </div>\n          </>\n        )}\n      </div>\n\n      <div className={styles.additionalInfo}>\n        <p>Additional information</p>\n        <li>\n          <Link to=\"Cast\" state={{ from: path }} className={styles.movieLinks}>\n            Cast\n          </Link>\n        </li>\n        <li>\n          <Link\n            to=\"Reviews\"\n            state={{ from: path }}\n            className={styles.movieLinks}\n          >\n            Reviews\n          </Link>\n        </li>\n      </div>\n\n      <Outlet />\n    </div>\n  );\n};\n\nexport default MoviePage;\n"],"names":["API_KEY","axiosRequest","axios","baseURL","FetchTrends","then","res","status","Error","statusText","FetchMovieByName","movieName","FetchMovieById","ID","FetchMovieCast","FetchMovieReviews","useState","film","setFilm","error","setError","itemId","useParams","location","useLocation","console","log","useEffect","FetchApi","movieInfo","data","catch","path","state","from","className","styles","to","alt","src","poster_path","width","title","release_date","substring","vote_average","overview","genres","map","item","name"],"sourceRoot":""}